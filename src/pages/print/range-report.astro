---
import { priceFormmater } from "@/components/dashboard/sell-point/product-card";
import Layout from "@/layouts/Layout.astro";
import { db } from "@/services/mysql";
import { products, saleItems, sales } from "db/schema";
import { and, eq, gte, lte, sql } from "drizzle-orm";

const data = Object.fromEntries(Astro.url.searchParams);

const currentSales =
    data.startDate === data.endDate
        ? await db
              .select()
              .from(sales)
              .where(
                  eq(
                      sql`DATE(${sales.createdDate})`,
                      new Date(data.startDate).toISOString().split("T")[0],
                  ),
              )
        : await db
              .select()
              .from(sales)
              .where(
                  and(
                      gte(
                          sql`DATE(${sales.createdDate})`,
                          new Date(data.startDate),
                      ),
                      lte(
                          sql`DATE(${sales.createdDate})`,
                          new Date(data.endDate),
                      ),
                  ),
              );

const currentSalesWithProducts = await Promise.all(
    currentSales.map(async (sales) => {
        const currentProducts = await db
            .select()
            .from(saleItems)
            .where(eq(saleItems.saleId, sales.id));

        const productsWithInfo = await Promise.all(
            currentProducts.map(async (product) => {
                const [productInfo] = await db
                    .select()
                    .from(products)
                    .where(eq(products.id, product.productId));

                return {
                    ...product,
                    info: productInfo,
                };
            }),
        );

        return {
            ...sales,
            products: productsWithInfo,
        };
    }),
);

const dateFormatter = new Intl.DateTimeFormat("es-MX", {
    year: "numeric",
    month: "long",
    day: "numeric",
});

const title = `Sales from ${dateFormatter.format(new Date(data.startDate))} to ${dateFormatter.format(new Date(data.endDate))}`;

const total = currentSalesWithProducts.reduce(
    (acc, sale) => acc + sale.total,
    0,
);
---

<Layout title={title}>
    <main class="p-4 bg-white shadow-md rounded-md">
        <h1 class="text-2xl font-bold text-center">{title}</h1>
        <table class="w-full mt-4">
            <thead class="bg-gray-100">
                <tr>
                    <th class="p-2">Product</th>
                    <th class="p-2">Quantity</th>
                    <th class="p-2">Price</th>
                    <th class="p-2">Total</th>
                </tr>
            </thead>
            <tbody>
                {
                    currentSalesWithProducts.map((sale) =>
                        sale.products.map((product) => (
                            <tr class="border-b">
                                <td>{product.info.name}</td>
                                <td>{product.quantity}</td>
                                <td>
                                    {priceFormmater.format(
                                        Number(product.info.price),
                                    )}
                                </td>
                                <td>{priceFormmater.format(product.total)}</td>
                            </tr>
                        )),
                    )
                }
            </tbody>

            <tfoot>
                <tr>
                    <td class="p-2 font-bold">Total</td>
                    <td class="p-2"></td>
                    <td class="p-2"></td>
                    <td class="p-2 font-bold">{priceFormmater.format(total)}</td
                    >
                </tr>
            </tfoot>
        </table>
    </main>
</Layout>

<script>
    const instantPrint = () => {
        window.print();
    };

    instantPrint();
</script>
